{"Value.ToJson":"\r\n\r\nlet Value.ToJson =\r\n    (\r\n      Val as any\r\n    ) as text =>\r\n    let\r\n      Value.TypeToText = __(\"Value.TypeToText\"),\r\n      Value.ToText = __(\"Value.ToText\"),\r\n      Type = Value.TypeToText(Val),\r\n      Sq = \"#(2032,02DD,2034,02DD,2032)\",\r\n      Dq = \"#(0022)\",\r\n      Quote     = (i as text) => Sq & i & Sq,\r\n      Combine   = (i as list) => Text.Combine(i,\",\"),\r\n      Array     = (i as text) => \"[\" & i & \"]\",\r\n      Object    = (i as text) => \"{\" & i & \"}\",\r\n      Rules = [\r\n        table   = Array(Combine(\r\n          Table.TransformRows(Val, each @Value.ToJson(_)) )),\r\n        record  = let\r\n            Fields    = Record.FieldNames(Val),\r\n            Values    = Record.FieldValues(Val),\r\n            Transform = List.Transform(Fields,\r\n              each Quote(_) & \":\" &\r\n              @Value.ToJson(Record.Field(Val, _)))\r\n          in Object(Combine(Transform)),\r\n        list    = Array(Combine(\r\n          List.Transform(Val, each @Value.ToJson(_)))),\r\n        text    = Quote(Val),\r\n        number  = Value.ToText(Val),\r\n        null    = \"null\",\r\n        logical = Value.ToText(Val),\r\n        date = Quote(Value.ToText(Val, \"YYYY-MM-DD\")),\r\n        time = Quote(Value.ToText(Val, \"hh:mm:ss.nnnnnnn\")),\r\n        datetime = Quote(Value.ToText(Val, \"YYYY-MM-DDThh:mm:ss.nnnnnnn\")),\r\n        datetimezone = Quote(Value.ToText(Val, \"YYYY-MM-DDThh:mm:ss.nnnZ\")),\r\n        duration = Quote(Value.ToText(Val, \"PdDhHmM[:s]S\")),\r\n        type = Quote(Value.TypeToText(Val)),\r\n        binary = Quote(Binary.ToText(Val, BinaryEncoding.Hex))\r\n      ]\r\n    in Text.Replace(Record.Field(Rules, Type), Sq, Dq)\r\nin Value.ToJson\r\n\r\n","Value.ToText":"\r\n\r\nlet\r\n    Value.ToText =\r\n    (\r\n      Value as any\r\n      , optional format as any\r\n      , optional culture as text\r\n    ) as any => let\r\n      format    = try format  as text otherwise try format as record otherwise null\r\n    , culture   = try culture as text otherwise \"en-US\"\r\n    , Recursion = (Value) => @Value.ToText(Value, format, culture)\r\n    , Value.TypeToText = __(\"Value.TypeToText\")\r\n    , Type  = Value.TypeToText(Value)\r\n    , Rules = [\r\n        null          = \"\"\r\n      , logical       = Logical.ToText(Value)\r\n      , number        = Number.ToText(Value,       try format[number]       as text otherwise try format as text otherwise null, culture)\r\n      , time          = Time.ToText(Value,         try format[time]         as text otherwise try format as text otherwise null, culture)\r\n      , date          = Date.ToText(Value,         try format[date]         as text otherwise try format as text otherwise null, culture)\r\n      , datetime      = DateTime.ToText(Value,     try format[datetime]     as text otherwise try format as text otherwise null, culture)\r\n      , datetimezone  = DateTimeZone.ToText(Value, try format[datetimezone] as text otherwise try format as text otherwise null, culture)\r\n      , duration      = Duration.ToText(Value,     try format[duration]     as text otherwise try format as text otherwise null)\r\n      , type          = \"type\"\r\n      , text          = Value\r\n      , list          = List.Transform(Value, each Recursion(_))\r\n      , record        = let\r\n          FieldNames  = Record.FieldNames(Value)\r\n        , FieldValues = Record.FieldValues(Value)\r\n        , Transformed = List.Transform(FieldValues, each Recursion(_))\r\n        in Record.FromList(Transformed, FieldNames)\r\n      , table         = Table.TransformColumns(Value, List.Transform(\r\n          Table.ColumnNames(Value), each {_, each Recursion(_)}))\r\n      , binary        = Binary.ToText(Value)\r\n      ]\r\n    in Record.Field(Rules, Type)\r\n\r\nin Value.ToText\r\n\r\n","Value.TypeToText":"\r\n\r\n(Value as any) as text =>\r\nlet\r\n\r\n  types = [\r\n    null         = type null\r\n  , logical      = type logical\r\n  , number       = type number\r\n  , time         = type time\r\n  , date         = type date\r\n  , datetime     = type datetime\r\n  , datetimezone = type datetimezone\r\n  , duration     = type duration\r\n  , text         = type text\r\n  , type         = type type\r\n  , list         = type list\r\n  , record       = type record\r\n  , table        = type table\r\n  , function     = type function\r\n  , binary       = type binary\r\n  , anynonnull   = type anynonnull\r\n  ]\r\n, Rules = List.Transform(Record.FieldNames(types), each {(x)=>Value.Is(x, Record.Field(types, _)), _})\r\n\r\nin List.First(List.Select(Rules, each _{0}(Value))){1}"}